 == exception ==
exception.h, test_exception.cpp
-> DONE,

== extensions ==
cloneable.h, test_cloneable.cpp
-> DONE,

constraints.h, test_constraints.cpp
-> DONE,

extensions.h, test_extensions.cpp
->DONE, (fix compilation when no libconcepts are present))

finally.h, test_finally.cpp
-> DONE, 

lazy.h, test_lazy.cpp
-> DONE

property.h, test_property.cpp
-> DONE ?? possible lambdas could be defined by template class


 == storage ==
heterogenous_container.h, test_heterogenous_container.cpp
-> DONE

parameter_pack.h, test_parameter_pack.cpp
-> DONE

resource_wrapper.h, resource_wrapper.cpp
-> fix compilation when no libconcepts are present

 == synchronization ==
 signal.h, test_signal.cpp
 -> DONE (fix compilation when no libconcepts are present)

wait_for_multiple_signals.h, test_wait_for_multiple_signals.cpp
 -> DONE (fix compilation when no libconcepts are present)

 == thread ==
sync_thread.h, sync_thread.cpp, test_sync_thread.cpp,
-> DONE

async.h, test_async.cpp
-> DONE (add coroutines)

 == tracing == 
trace.h, test_trace.cpp
-> DONE

 == utility ==
 conversion.h, test_conversion.cpp

TODO:
- Check concurrent and atomic_concurrent
- Finish extensions.h cleanup
- use this c++23 in all files
- Rewrite asserts that use good style (expected value, actual value)
- Better formatting
- Create readme.md
- Minimum supported version c++17 -> test it
- Use wait_for_multiple_signals in _sync_thread
- Implement notify all in signal condition variable and add testing for it


EXTRA:
Create c++ compile time DI
https://github.com/radzevich/Compile-time-Dependency-Injection