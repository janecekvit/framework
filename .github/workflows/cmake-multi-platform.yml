name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: ${{ matrix.os }} - ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows MSVC
          - os: windows-latest
            compiler: msvc
            cmake_generator: "Visual Studio 17 2022"
            vcpkg_triplet: x64-windows
            
          # Ubuntu GCC
          - os: ubuntu-latest
            compiler: gcc
            cmake_generator: "Unix Makefiles"
            vcpkg_triplet: x64-linux
            cc: gcc-11
            cxx: g++-11
            
          # Ubuntu Clang
          - os: ubuntu-latest
            compiler: clang
            cmake_generator: "Unix Makefiles"
            vcpkg_triplet: x64-linux
            cc: clang-14
            cxx: clang++-14
            
          # macOS Clang
          - os: macos-latest
            compiler: clang
            cmake_generator: "Unix Makefiles"
            vcpkg_triplet: x64-osx

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Setup build environment
    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Setup GCC/Clang (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get update
          sudo apt-get install -y gcc-11 g++-11
        elif [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get update
          sudo apt-get install -y clang-14
        fi
        echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV

    # Create build directory
    - name: Create build directory
      run: cmake -E make_directory ${{ github.workspace }}/build

    # Configure
    - name: Configure CMake
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: |
        cmake .. \
          -G "${{ matrix.cmake_generator }}" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" \
          -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }}

    # Build
    - name: Build
      working-directory: ${{ github.workspace }}/build
      shell: bash
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          cmake --build . --config Release
        else
          cmake --build . -- -j$(nproc)
        fi

    # Test
    - name: Test
      working-directory: ${{ github.workspace }}/build
      shell: bash
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          ctest -C Release --output-on-failure
        else
          ctest --output-on-failure
        fi

    # Upload test results
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          build/Testing/
          build/**/test-results.xml
