name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: ${{ matrix.os }} - ${{ matrix.compiler }} - C++${{ matrix.cxx_standard }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows MSVC - C++20
          - os: windows-latest
            compiler: msvc
            cmake_generator: "Visual Studio 17 2022"
            vcpkg_triplet: x64-windows
            cxx_standard: "20"
            
          # Windows MSVC - C++23
          - os: windows-latest
            compiler: msvc
            cmake_generator: "Visual Studio 17 2022"
            vcpkg_triplet: x64-windows
            cxx_standard: "23"
            
          # Ubuntu GCC - C++20
          - os: ubuntu-latest
            compiler: gcc
            cmake_generator: "Unix Makefiles"
            vcpkg_triplet: x64-linux
            cc: gcc-14
            cxx: g++-14
            cxx_standard: "20"
            
          # Ubuntu GCC - C++23
          - os: ubuntu-latest
            compiler: gcc
            cmake_generator: "Unix Makefiles"
            vcpkg_triplet: x64-linux
            cc: gcc-14
            cxx: g++-14
            cxx_standard: "23"
            
          # Ubuntu Clang - C++20
          - os: ubuntu-latest
            compiler: clang
            cmake_generator: "Unix Makefiles"
            vcpkg_triplet: x64-linux
            cc: clang-18
            cxx: clang++-18
            cxx_standard: "20"
            
          # Ubuntu Clang - C++23
          - os: ubuntu-latest
            compiler: clang
            cmake_generator: "Unix Makefiles"
            vcpkg_triplet: x64-linux
            cc: clang-18
            cxx: clang++-18
            cxx_standard: "23"
            
          # macOS Clang - C++20
          - os: macos-latest
            compiler: clang
            cmake_generator: "Unix Makefiles"
            vcpkg_triplet: x64-osx
            cxx_standard: "20"
            
          # macOS Clang - C++23
          - os: macos-latest
            compiler: clang
            cmake_generator: "Unix Makefiles"
            vcpkg_triplet: x64-osx
            cxx_standard: "23"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Cache vcpkg
    - name: Cache vcpkg
      id: cache-vcpkg
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg
          !${{ github.workspace }}/vcpkg/buildtrees
          !${{ github.workspace }}/vcpkg/packages
          !${{ github.workspace }}/vcpkg/downloads
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-

    # Setup build environment
    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Setup GCC/Clang (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      shell: pwsh
      run: |
        if ("${{ matrix.compiler }}" -eq "gcc") {
          sudo apt-get update
          sudo apt-get install -y gcc-14 g++-14
        } elseif ("${{ matrix.compiler }}" -eq "clang") {
          sudo apt-get update
          sudo apt-get install -y clang-18
        }
        echo "CC=${{ matrix.cc }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "CXX=${{ matrix.cxx }}" | Out-File -FilePath $env:GITHUB_ENV -Append

    # Install vcpkg
    - name: Setup vcpkg
      shell: pwsh
      run: |
        if (-not (Test-Path "vcpkg")) {
          git clone https://github.com/Microsoft/vcpkg.git
          Set-Location vcpkg
          if ($IsWindows) {
            ./bootstrap-vcpkg.bat -disableMetrics
          } else {
            ./bootstrap-vcpkg.sh -disableMetrics
          }
          Set-Location ..
        }
        ./vcpkg/vcpkg --version

    # Install dependencies
    - name: Install dependencies
      shell: pwsh
      run: |
        ./vcpkg/vcpkg install gtest:${{ matrix.vcpkg_triplet }}

    # Configure
    - name: Configure CMake
      shell: pwsh
      run: |
        cmake -S . -B build `
          -G "${{ matrix.cmake_generator }}" `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_CXX_STANDARD=${{ matrix.cxx_standard }} `
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" `
          -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }}

    # Build
    - name: Build
      shell: pwsh
      run: |
        cmake --build build --config Release --parallel

    # Test
    - name: Test
      shell: pwsh
      run: |
        ctest --test-dir build --output-on-failure --parallel --timeout 30

    # Upload test results
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.compiler }}-cpp${{ matrix.cxx_standard }}
        path: |
          build/Testing/
          build/**/test-results.xml