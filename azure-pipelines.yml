trigger:
- master

variables:
  buildConfiguration: 'Release'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildTest
    displayName: 'Build and Test Framework'
    timeoutInMinutes: 30
    strategy:
      matrix:
        # Windows MSVC - C++17
        Windows_MSVC_17:
          vmImage: 'windows-latest'
          compiler: 'msvc'
          cxxStandard: '17'
          buildPlatform: 'x64'
          cmakeGenerator: 'Visual Studio 17 2022'
          buildDir: '$(Build.SourcesDirectory)\build'
          
        # Windows MSVC - C++20  
        Windows_MSVC_20:
          vmImage: 'windows-latest'
          compiler: 'msvc'
          cxxStandard: '20'
          buildPlatform: 'x64'
          cmakeGenerator: 'Visual Studio 17 2022'
          buildDir: '$(Build.SourcesDirectory)\build'
          
        # Windows MSVC - C++23
        Windows_MSVC_23:
          vmImage: 'windows-latest'
          compiler: 'msvc'
          cxxStandard: '23'
          buildPlatform: 'x64'
          cmakeGenerator: 'Visual Studio 17 2022'
          buildDir: '$(Build.SourcesDirectory)\build'
          
        # Ubuntu GCC - C++17
        Ubuntu_GCC_17:
          vmImage: 'ubuntu-latest'
          compiler: 'gcc'
          cxxStandard: '17'
          buildPlatform: 'x64'
          cmakeGenerator: 'Unix Makefiles'
          buildDir: '$(Build.SourcesDirectory)/build'
          CC: 'gcc-14'
          CXX: 'g++-14'
          
        # Ubuntu GCC - C++20
        Ubuntu_GCC_20:
          vmImage: 'ubuntu-latest'
          compiler: 'gcc'
          cxxStandard: '20'
          buildPlatform: 'x64'
          cmakeGenerator: 'Unix Makefiles'
          buildDir: '$(Build.SourcesDirectory)/build'
          CC: 'gcc-14'
          CXX: 'g++-14'
          
        # Ubuntu GCC - C++23
        Ubuntu_GCC_23:
          vmImage: 'ubuntu-latest'
          compiler: 'gcc'
          cxxStandard: '23'
          buildPlatform: 'x64'
          cmakeGenerator: 'Unix Makefiles'
          buildDir: '$(Build.SourcesDirectory)/build'
          CC: 'gcc-14'
          CXX: 'g++-14'
          
        # Ubuntu Clang - C++17
        Ubuntu_Clang_17:
          vmImage: 'ubuntu-latest'
          compiler: 'clang'
          cxxStandard: '17'
          buildPlatform: 'x64'
          cmakeGenerator: 'Unix Makefiles'
          buildDir: '$(Build.SourcesDirectory)/build'
          CC: 'clang-18'
          CXX: 'clang++-18'
          
        # Ubuntu Clang - C++20
        Ubuntu_Clang_20:
          vmImage: 'ubuntu-latest'
          compiler: 'clang'
          cxxStandard: '20'
          buildPlatform: 'x64'
          cmakeGenerator: 'Unix Makefiles'
          buildDir: '$(Build.SourcesDirectory)/build'
          CC: 'clang-18'
          CXX: 'clang++-18'
          
        # Ubuntu Clang - C++23
        Ubuntu_Clang_23:
          vmImage: 'ubuntu-latest'
          compiler: 'clang'
          cxxStandard: '23'
          buildPlatform: 'x64'
          cmakeGenerator: 'Unix Makefiles'
          buildDir: '$(Build.SourcesDirectory)/build'
          CC: 'clang-18'
          CXX: 'clang++-18'
          
        # macOS Clang - C++17
        macOS_Clang_17:
          vmImage: 'macOS-latest'
          compiler: 'clang'
          cxxStandard: '17'
          buildPlatform: 'x64'
          cmakeGenerator: 'Unix Makefiles'
          buildDir: '$(Build.SourcesDirectory)/build'
          
        # macOS Clang - C++20
        macOS_Clang_20:
          vmImage: 'macOS-latest'
          compiler: 'clang'
          cxxStandard: '20'
          buildPlatform: 'x64'
          cmakeGenerator: 'Unix Makefiles'
          buildDir: '$(Build.SourcesDirectory)/build'
          
        # macOS Clang - C++23
        macOS_Clang_23:
          vmImage: 'macOS-latest'
          compiler: 'clang'
          cxxStandard: '23'
          buildPlatform: 'x64'
          cmakeGenerator: 'Unix Makefiles'
          buildDir: '$(Build.SourcesDirectory)/build'
    
    pool:
      vmImage: $(vmImage)
    
    steps:
    - checkout: self
      displayName: "Checkout repository"

    # Setup Ubuntu dependencies
    - bash: |
        if [[ "$(compiler)" == "gcc" ]]; then
          sudo apt-get update
          sudo apt-get install -y gcc-14 g++-14
        elif [[ "$(compiler)" == "clang" ]]; then
          sudo apt-get update  
          sudo apt-get install -y clang-18
        fi
      displayName: "Setup Ubuntu Dependencies"
      condition: eq(variables['Agent.OS'], 'Linux')
      
    # set date for cache key
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $date = Get-Date -Format "yyyyMMdd"
          Write-Host "##vso[task.setvariable variable=BuildDate]$date"
          Write-Host "Build date for cache: $date"
      displayName: "Set Build Date"
      
    # Cache CMake build directory for faster builds
    - task: Cache@2
      inputs:
        key: 'cmake-build-$(BuildDate) | $(Agent.OS) | $(buildPlatform) | $(buildConfiguration) | $(compiler) | $(cxxStandard) | CMakeLists.txt | tests'
        path: '$(buildDir)'
        restoreKeys: |
          cmake-build-$(BuildDate) | $(Agent.OS) | $(buildPlatform) | $(buildConfiguration) | $(compiler) | $(cxxStandard)
          cmake-build-$(BuildDate) | $(Agent.OS) | $(buildPlatform) | $(buildConfiguration) | $(compiler)
          cmake-build-$(BuildDate) | $(Agent.OS) | $(buildPlatform) | $(buildConfiguration)
      displayName: "Cache CMake build directory"
      
    # Configure CMake
    - task: CMake@1
      inputs:
        workingDirectory: '$(buildDir)'
        cmakeArgs: >-
          -G "$(cmakeGenerator)"
          ${{ if eq(variables['Agent.OS'], 'Windows_NT') }}-A x64${{ endif }}
          -DCMAKE_BUILD_TYPE=$(buildConfiguration)
          -DCMAKE_CXX_STANDARD=$(cxxStandard)              
          -DBUILD_TESTING=ON
          -DENABLE_CLANG_TIDY=ON
          -DENABLE_CPPCHECK=OFF
          -DENABLE_CLANG_FORMAT=ON
          $(Build.SourcesDirectory)
      displayName: "Configure with CMake"
      env:
        CC: $(CC)
        CXX: $(CXX)

    # Build the framework and tests
    - script: |
        echo "Building framework and tests..."
        cd $(buildDir)
        
        cmake --build . --config $(buildConfiguration) --parallel 4 --target framework_tests
        
        if %ERRORLEVEL% neq 0 (
          echo "Build failed!"
          exit /b %ERRORLEVEL%
        )
        echo "Build completed successfully"
      displayName: "Build Framework and Tests"
    
    # Run tests - Windows
    - script: |
        echo "Running tests on Windows..."
        cd $(buildDir)
        chcp 65001
        .\bin\framework_tests.exe --gtest_output=xml:GoogleTestResults.xml --timeout=30
        echo "Running tests completed"
      displayName: "Run Tests (Windows)"
      condition: eq(variables['Agent.OS'], 'Windows_NT')
      continueOnError: true
      env:
        LANG: 'en_US.UTF-8'
        LC_ALL: 'en_US.UTF-8'
        
    # Run tests - Linux/macOS
    - bash: |
        echo "Running tests on Unix..."
        cd $(buildDir)
        ./bin/framework_tests --gtest_output=xml:GoogleTestResults.xml --timeout=30
        echo "Running tests completed"
      displayName: "Run Tests (Unix)"
      condition: ne(variables['Agent.OS'], 'Windows_NT')
      continueOnError: true
      env:
        LANG: 'en_US.UTF-8'
        LC_ALL: 'en_US.UTF-8'

    # Publish test results
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(buildDir)/GoogleTestResults.xml'
        testRunTitle: 'Framework Tests - $(compiler) C++$(cxxStandard)'
        mergeTestResults: true
        failTaskOnFailedTests: false
      displayName: "Publish Test Results"
      condition: always()

    # Publish build artifacts
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(buildDir)/bin'
        artifactName: 'framework-binaries-$(compiler)-cpp$(cxxStandard)-$(buildConfiguration)'
        publishLocation: 'Container'
      displayName: "Publish Build Artifacts"
      condition: always()

    # Build summary - Windows
    - script: |
        echo "=== Build Summary ==="
        echo "Compiler: $(compiler)"
        echo "C++ Standard: $(cxxStandard)" 
        echo "Configuration: $(buildConfiguration)"
        echo "Platform: $(buildPlatform)"
        echo "Build Directory: $(buildDir)"
        
        cd $(buildDir)
        echo "=== Available executables ==="
        dir bin\*.exe
        
        echo "=== CMake targets ==="
        cmake --build . --target help | findstr "... "
      displayName: "Build Summary (Windows)"
      condition: eq(variables['Agent.OS'], 'Windows_NT')
      
    # Build summary - Linux/macOS
    - bash: |
        echo "=== Build Summary ==="
        echo "Compiler: $(compiler)"
        echo "C++ Standard: $(cxxStandard)"
        echo "Configuration: $(buildConfiguration)"
        echo "Platform: $(buildPlatform)"
        echo "Build Directory: $(buildDir)"
        
        cd $(buildDir)
        echo "=== Available executables ==="
        ls -la bin/
        
        echo "=== CMake targets ==="
        cmake --build . --target help | grep "... "
      displayName: "Build Summary (Unix)"
      condition: ne(variables['Agent.OS'], 'Windows_NT')

- stage: StaticAnalysis
  displayName: 'Static Analysis'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['System.PullRequest.TargetBranch'], 'refs/heads/master'))
  variables:
    buildPlatform: 'x64'
    buildConfiguration: 'Release'
    buildDir: '$(Build.SourcesDirectory)\build'
  jobs:
  - job: StaticAnalysis
    displayName: 'Run Static Analysis (Windows C++23)'
    timeoutInMinutes: 20
    pool:
      vmImage: 'windows-latest'
    
    steps:
    - checkout: self
      displayName: "Checkout repository"
    
    # set date for cache key
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $date = Get-Date -Format "yyyyMMdd"
          Write-Host "##vso[task.setvariable variable=BuildDate]$date"
          Write-Host "Build date for cache: $date"
      displayName: "Set Build Date"
    
    # Restore CMake build cache
    - task: Cache@2
      inputs:
        key: 'cmake-build-$(BuildDate) | $(Agent.OS) | $(buildPlatform) | $(buildConfiguration) | msvc | 23 | CMakeLists.txt | tests'
        path: '$(buildDir)'
      displayName: "Restore CMake build cache"

    # Configure CMake
    - task: CMake@1
      inputs:
        workingDirectory: '$(buildDir)'
        cmakeArgs: >-
          -G "Visual Studio 17 2022" -A x64
          -DCMAKE_BUILD_TYPE=$(buildConfiguration)
          -DCMAKE_CXX_STANDARD=23              
          -DBUILD_TESTING=ON
          -DENABLE_CLANG_TIDY=ON
          -DENABLE_CPPCHECK=OFF
          -DENABLE_CLANG_FORMAT=ON
          $(Build.SourcesDirectory)
      displayName: "Configure with CMake"

    # Upgrade LLVM/clang-format
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Checking for LLVM updates..."
          echo "Current LLVM:"
          choco list llvm --local-only
          
          echo "Upgrading to latest:"
          choco upgrade llvm -y
          
          refreshenv
          Write-Host "Current version:"
          clang-format --version
      displayName: "Upgrade LLVM/clang-format"

    # Run format check
    - script: |
        cd $(buildDir)
        echo "Running format check..."
        cmake --build . --config $(buildConfiguration) --target FORMAT_CHECK
      displayName: "Format Check"
      continueOnError: true

    # Run custom static analysis targets if available
    - script: |
        cd $(buildDir)
        echo "Running static analysis..."
        cmake --build . --config $(buildConfiguration) --target STATIC_ANALYSIS_CHECK
      displayName: "Static Analysis"
      continueOnError: true

    # Publish analysis artifacts
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(buildDir)'
        artifactName: 'static-analysis-results'
        publishLocation: 'Container'
        parallel: true
      displayName: "Publish Analysis Results"
      condition: always()